#!/bin/bash

function wwwdo () {
  sudo -Eu $WEB_USER --preserve-env=DGI_MIGRATE__DO_MIGRATION_LOOKUP_LOCKING -- ${@:1}
}

function wwwdrush () {
  wwwdo $DRUSH "--root=$DRUPAL_ROOT" "--uri=$URI" ${@:1}
}

function timedwwwdrush () {
  wwwdo $TIME --verbose $DRUSH "--root=$DRUPAL_ROOT" "--uri=$URI" ${@:1}
}

function get_op_number () {
  local NUM=1
  local NUM_FILE="$LOG_DIR/.RUNS"

  if wwwdo test -f "$NUM_FILE"; then
    if wwwdo test -r "$NUM_FILE"; then
      read NUM < $NUM_FILE;
    else
      echo "Unable to read $NUM_FILE.";
      exit 1;
    fi

    # Increment from the last run.
    NUM=$(($NUM + 1))
  fi

  # Write the current run number back.
  if ( wwwdo test -f "$NUM_FILE" && ! wwwdo test -w "$NUM_FILE" ) || ! wwwdo test -w "$(dirname $NUM_FILE)"; then
    echo "Unable to write to $NUM_FILE.";
    exit 1;
  else
    echo $NUM | wwwdo tee $NUM_FILE > /dev/null
  fi

  printf "%02d\n" $NUM
}

# Setup variables; further unbound things constitute an error.
#
# Positional args:
# - 1: The directory under which to look for the ".env" file. Also the default
#   LOG_DIR, if not otherwise provided in the .env file.
function init_vars () {
  CONFIG_DIR=${1:?Missing log dir.}
  DOT_ENV="$CONFIG_DIR/.env"
  if [ -f $DOT_ENV ] ; then
    if [ -r $DOT_ENV ] ; then
      . $DOT_ENV
    else
      echo ".env file ($DOT_ENV) exists but is not readable."
      exit 1;
    fi
  fi

  declare -g DRUPAL_ROOT=${DRUPAL_ROOT:-/opt/www/drupal}
  declare -g DRUPAL_USER=${DRUPAL_USER:-1}
  declare -g DRUSH=${DRUSH:-"$DRUPAL_ROOT/vendor/bin/drush"}
  declare -g MIGRATION_GROUP=${MIGRATION_GROUP:?A MIGRATION_GROUP must be specified.}
  declare -g WEB_USER=${WEB_USER:-"www-data"}
  declare -g URI=${URI:?Missing URI}
  declare -g TIME=${TIME:-/usr/bin/time}
  declare -g LOG_DIR=${LOG_DIR:-$CONFIG_DIR}
  declare -g PROCESSES=${PROCESSES:-1}

  # Initialize the log directory.
  if ! [ -d "$LOG_DIR" ]; then
    echo "Log dir ($LOG_DIR) does not exist; creating it."
    mkdir -p "$LOG_DIR"
    sudo chown -R "$WEB_USER:$WEB_USER" "$LOG_DIR"
  elif ! ( wwwdo test -d "$LOG_DIR" && wwwdo test -w "$LOG_DIR" ); then
    echo "$WEB_USER must be able to write (logs) to the log directory ($LOG_DIR)."
    exit 1;
  fi

  if [ $PROCESSES -gt 1 ]; then
    export DGI_MIGRATE__DO_MIGRATION_LOOKUP_LOCKING="TRUE"
  else
    export DGI_MIGRATE__DO_MIGRATION_LOOKUP_LOCKING="FALSE"
  fi

  set -u
}

# Kick off a migration in a single process.
#
# Positional args:
#
# - 1: The operation number.
# - 2+: Additional arguments to pass to the dgi-migrate:import command.
function do_migration_single_process() {
  # The base import
  timedwwwdrush dgi-migrate:import "--root=$DRUPAL_ROOT" "--uri=$URI" "--user=$DRUPAL_USER" "--group=$MIGRATION_GROUP" "${@:2}"
}

# Kick off a migration in multiple processes.
#
# Positional args:
#
# - 1: The operation number.
# - 2+: Additional arguments to pass to the migrate commands... only really expecting "--update"
function do_migration_multi_process() {
  local NUM=${1}

  local PROCESS_LOG_DIR="$LOG_DIR/$NUM-multiprocess-logs"

  wwwdo mkdir -p $PROCESS_LOG_DIR

  echo "Listing migrations..."
  timedwwwdrush dgi-migrate:list-migrations "--group=$MIGRATION_GROUP" --format=string \
    | sort -n --key=2 | cut -f1 | while read MIGRATION_ID; do
      echo "Enqueuing items for $MIGRATION_ID"
      timedwwwdrush dgi-migrate:enqueue --user=$DRUPAL_USER $MIGRATION_ID $NUM "${@:2}"
      local ENQUEUEING_JOB=$!
      echo "Starting $PROCESSES processes to process $MIGRATION_ID."
      local -a PROCESS_JOBS=()
      for i in $(seq 1 $PROCESSES); do
        echo "Starting $i/$PROCESSES to process $MIGRATION_ID."
        timedwwwdrush dgi-migrate:enqueued-process --user=$DRUPAL_USER $MIGRATION_ID $NUM "${@:2}" &> $PROCESS_LOG_DIR/$MIGRATION_ID.$i.log &
        PROCESS_JOBS+=($!)
      done
      wait $ENQUEUEING_JOB
      echo "Enqueing finished; signalling workers."
      kill -SIGUSR1 ${PROCESS_JOBS[@]}
      echo "Workers signalled; Waiting for them to finish..."
      wait ${PROCESS_JOBS[@]}
      timedwwwdrush dgi-migrate:finish-enqueued-process --user=1 $MIGRATION_ID "${@:2}"
    done
}

# Handle kicking off a migration.
#
# Positional args:
#
# - 1: The operation number.
# - 2+: Additional arguments to pass to the dgi-migrate:import command.
function do_migration () {
  local NUM=${1}

  local IMPORT_LOG="$LOG_DIR/$NUM-import.log"
  local RUN_LOG="$LOG_DIR/$NUM-run.log"
  local MESSAGES_DIR="$LOG_DIR/$NUM-messages"
  local PROCESS_LOG_DIR="$LOG_DIR/$NUM-multiprocess-logs"

  {
    set -x
    # XXX: Paranoia; a cache rebuild _with_ the URI, to ensure that anything
    # that makes use of the `--uri` to do things will have an appropriate one.
    # (lookin' at you, dgi_migrate_foxml_standard_mods_xslt dealio)
    wwwdrush cache:rebuild
    # Dump status before run.
    wwwdrush migrate:status --group=$MIGRATION_GROUP
    {
      # Do the import, one way or another.
      if [ $PROCESSES -eq 1 ]; then
        do_migration_single_process "$@"
      else
        do_migration_multi_process "$@"
      fi
    } |& wwwdo tee $IMPORT_LOG > /dev/null
    # Dump status after run.
    wwwdrush migrate:status --group=$MIGRATION_GROUP
    # Dump messages after run, so they're not lost with a subsequent run.
    wwwdo mkdir -p $MESSAGES_DIR
    wwwdrush migrate:status --group=$MIGRATION_GROUP --field=id --format=string | \
    while read NAME ; do
      wwwdrush migrate:messages --format=json $NAME | wwwdo tee "$MESSAGES_DIR/$NAME.json" > /dev/null
    done
    set +x
  } |& wwwdo tee $RUN_LOG

  cat <<EOF
---
Import command (operation $NUM) terminated; see log files in:
- $IMPORT_LOG
- $RUN_LOG
and the JSON files representing the output messages in:
- $MESSAGES_DIR
EOF

  if [ $PROCESSES -gt 1 ]; then
    cat <<EOF
Multiprocessed logs should be in:
- $PROCESS_LOG_DIR
EOF
  fi
}

# Handle kicking off the rollback of a migration.
#
# Positional args:
#
# - 1: The operation number.
# - 2+: Additional arguments to pass to the dgi-migrate:rollback command.
function do_rollback () {
  local NUM=${1}

  local ROLLBACK_LOG="$LOG_DIR/$NUM-rollback.log"
  local RUN_LOG="$LOG_DIR/$NUM-run.log"

  {
    set -x
    # XXX: Paranoia; a cache rebuild _with_ the URI, to ensure that anything
    # that makes use of the `--uri` to do things will have an appropriate one.
    # (lookin' at you, things involving Fedora dealio)
    wwwdrush cache:rebuild
    # Dump status before rollback.
    wwwdrush migrate:status --group=$MIGRATION_GROUP
    # The base rollback.
    timedwwwdrush dgi-migrate:rollback --user=$DRUPAL_USER --group=$MIGRATION_GROUP "${@:2}" |& wwwdo tee $ROLLBACK_LOG > /dev/null
    # Dump status after rollback.
    wwwdrush migrate:status --group=$MIGRATION_GROUP
    set +x
  } |& wwwdo tee $RUN_LOG

  cat <<EOF
---
Rollback command (operation $NUM) terminated; see log files in:
- $ROLLBACK_LOG
- $RUN_LOG
EOF
}
