<?php

/**
 * @file
 * Misc (un)installation and update hooks.
 */

/**
 * Delete example migration entities migrated to live as plugins.
 */
function dgi_migrate_update_9201() {
  $entities = [
    'migrate_plus.migration.content_files',
    'migrate_plus.migration.content_media',
    'migrate_plus.migration.foxml_files',
    'migrate_plus.migration.foxml_media',
    'migrate_plus.migration.foxml_nodes',
  ];

  $config_factory = \Drupal::configFactory();
  foreach ($entities as $entity) {
    $config_factory->getEditable($entity)->delete();
  }

}

/**
 * Ensure the islandora_drush_utils module is enabled.
 */
function dgi_migrate_update_9202() {
  $module_handler = \Drupal::moduleHandler();
  $module = 'islandora_drush_utils';
  if ($module_handler->moduleExists($module)) {
    return t('The "@module_name" module is already enabled, no action necessary.', [
      '@module_name' => $module,
    ]);
  }

  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
  $installer = \Drupal::service('module_installer');

  try {
    if ($installer->install([$module], TRUE)) {
      return t('The "@module_name" module was enabled successfully.', [
        '@module_name' => $module,
      ]);
    }
  }
  catch (ExtensionNameLengthException | MissingDependencyException $e) {
    throw new UpdateException("Failed; ensure that the '$module' module is available in the Drupal installation.", 0, $e);
  }
  catch (\Exception $e) {
    throw new UpdateException("Failed; encountered an exception while trying to enable '$module'.", 0, $e);
  }

  // Theoretically impossible to hit, as ModuleInstaller::install() only returns
  // TRUE (or throws/propagates an exception), but... probably a good idea to
  // have the here, just in case?
  throw new UpdateException('Failed; hit the end of the update hook implementation, which is not expected.');
}
